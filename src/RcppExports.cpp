// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// tlrmvnratio_internal
Rcpp::List tlrmvnratio_internal(Eigen::VectorXd a, Eigen::VectorXd b, Eigen::MatrixXd covM, int m, double epsl, int N);
RcppExport SEXP _tlrmvnratio_tlrmvnratio_internal(SEXP aSEXP, SEXP bSEXP, SEXP covMSEXP, SEXP mSEXP, SEXP epslSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type covM(covMSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type epsl(epslSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(tlrmvnratio_internal(a, b, covM, m, epsl, N));
    return rcpp_result_gen;
END_RCPP
}
// zorder
Eigen::VectorXi zorder(const Eigen::MatrixXd& geom);
RcppExport SEXP _tlrmvnratio_zorder(SEXP geomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type geom(geomSEXP);
    rcpp_result_gen = Rcpp::wrap(zorder(geom));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tlrmvnratio_tlrmvnratio_internal", (DL_FUNC) &_tlrmvnratio_tlrmvnratio_internal, 6},
    {"_tlrmvnratio_zorder", (DL_FUNC) &_tlrmvnratio_zorder, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tlrmvnratio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
